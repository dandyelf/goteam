// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: my.proto

package prot

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RepServClient is the client API for RepServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepServClient interface {
	// определение метода с использованием rpc.
	GetData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (RepServ_GetDataClient, error)
}

type repServClient struct {
	cc grpc.ClientConnInterface
}

func NewRepServClient(cc grpc.ClientConnInterface) RepServClient {
	return &repServClient{cc}
}

func (c *repServClient) GetData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (RepServ_GetDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepServ_ServiceDesc.Streams[0], "/RepServ/GetData", opts...)
	if err != nil {
		return nil, err
	}
	x := &repServGetDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepServ_GetDataClient interface {
	Recv() (*Point, error)
	grpc.ClientStream
}

type repServGetDataClient struct {
	grpc.ClientStream
}

func (x *repServGetDataClient) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RepServServer is the server API for RepServ service.
// All implementations must embed UnimplementedRepServServer
// for forward compatibility
type RepServServer interface {
	// определение метода с использованием rpc.
	GetData(*empty.Empty, RepServ_GetDataServer) error
	mustEmbedUnimplementedRepServServer()
}

// UnimplementedRepServServer must be embedded to have forward compatible implementations.
type UnimplementedRepServServer struct {
}

func (UnimplementedRepServServer) GetData(*empty.Empty, RepServ_GetDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedRepServServer) mustEmbedUnimplementedRepServServer() {}

// UnsafeRepServServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepServServer will
// result in compilation errors.
type UnsafeRepServServer interface {
	mustEmbedUnimplementedRepServServer()
}

func RegisterRepServServer(s grpc.ServiceRegistrar, srv RepServServer) {
	s.RegisterService(&RepServ_ServiceDesc, srv)
}

func _RepServ_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepServServer).GetData(m, &repServGetDataServer{stream})
}

type RepServ_GetDataServer interface {
	Send(*Point) error
	grpc.ServerStream
}

type repServGetDataServer struct {
	grpc.ServerStream
}

func (x *repServGetDataServer) Send(m *Point) error {
	return x.ServerStream.SendMsg(m)
}

// RepServ_ServiceDesc is the grpc.ServiceDesc for RepServ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepServ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RepServ",
	HandlerType: (*RepServServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetData",
			Handler:       _RepServ_GetData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "my.proto",
}
